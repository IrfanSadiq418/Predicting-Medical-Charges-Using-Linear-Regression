import pandas as pd
data=pd.read_csv(r"C:\insurance.csv") #file location
data.head()
data.shape
data.describe()
data.info()

from sklearn.preprocessing import OneHotEncoder
encoder=OneHotEncoder(drop='first',sparse_output=False)
encoded_columns=encoder.fit_transform(data[['sex','smoker']])
feature_names=encoder.get_feature_names_out(['sex','smoker'])
feature_names
encoded_columns

encoded_df_binary=pd.DataFrame(encoded_columns,columns=feature_names)
encoded_df_binary.head(2)
encoder=OneHotEncoder(sparse_output=False)
encoded_columns=encoder.fit_transform(data[['region']])
feature_names=encoder.get_feature_names_out(['region'])
encoded_df_region=pd.DataFrame(encoded_columns,columns=feature_names)
encoded_df_region.head(2)

#Concatenating encoded_dfs
encoded_df=pd.concat([encoded_df_binary,encoded_df_region],axis=1)
encoded_df.head(2)
#Concatenating encoded_df with data
data_encoded=pd.concat([data.drop(['sex','smoker','region'],axis=1),encoded_df],axis=1)
data_encoded.head(2)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd


# Setting up the matplotlib figure
plt.figure(figsize=(15, 5))

# Plotting the distribution of 'age'
plt.subplot(1, 4, 1)
sns.histplot(data['age'], kde=True)
plt.title('Age Distribution')

# Plotting the distribution of 'bmi'
plt.subplot(1, 4, 2)
sns.histplot(data['bmi'], kde=True)
plt.title('BMI Distribution')

# Plotting the distribution of 'charges'
plt.subplot(1, 4, 3)
sns.histplot(data['charges'], kde=True)
plt.title('Charges Distribution')

# Plotting the distribution of 'children'
plt.subplot(1, 4, 4)
sns.histplot(data['children'], kde=True)
plt.title('Children Distribution')

# Displaying the plots
plt.tight_layout()
plt.show()

from sklearn.preprocessing import StandardScaler, MinMaxScaler
#Standerdizing age and bmi
standard_scaler=StandardScaler()
data_encoded[['age','bmi']]=standard_scaler.fit_transform(data_encoded[['age','bmi']])

#Normalizing Charges
Min_Max_Scaler=MinMaxScaler()
data_encoded[['charges']]=Min_Max_Scaler.fit_transform(data_encoded[['charges']])
data_encoded.head()
corr_matrix=data_encoded.corr()
# Set up the matplotlib figure
plt.figure(figsize=(8, 8))

# Create a heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True, fmt='.2f')

# Display the heatmap
plt.title('Correlation Matrix')
plt.show()
fig,axes=plt.subplots(nrows=1,ncols=3,figsize=(18,5))
sns.scatterplot(x='age',y='charges',data=data,ax=axes[0])
axes[0].set_title("Age vs Charges")
sns.scatterplot(x='bmi',y='charges',data=data,ax=axes[1])
axes[1].set_title("BMI vs Charges")
sns.scatterplot(x='smoker',y='charges',data=data,ax=axes[2])
axes[2].set_title("Smoker Status vs Charges")
X=data_encoded.drop('charges',axis=1) #features
y=data_encoded['charges'] #target variable

#Model
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LinearRegression
# Creating a linear regression model
model = LinearRegression()

# Fitting the model with the training data
model.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
# Making predictions on the test data
y_pred = model.predict(X_test)
# Calculating R-squared and Mean Squared Error
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"R-squared: {r2}")
print(f"Mean Squared Error: {mse}")
Coefficients=pd.DataFrame(model.coef_,X.columns,columns=['coefficient'])
Coefficients.sort_values(by='coefficient',ascending=False)

Key Insights:
Smoking Status: The most significant predictor of higher medical charges.
Age and BMI: Both significantly impact medical charges, with older age and higher BMI leading to increased charges.
Geographical Region: There are some variations in medical charges based on the region, but these effects are relatively small compared to factors like smoking status, age, and BMI.
Gender: The impact of being male on medical charges is negligible.
Children: Having more children results in slightly higher charges, but the effect is quite modest.
